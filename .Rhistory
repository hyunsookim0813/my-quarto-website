#0308
library(tidyverse)
#ggplot2는 결과를 그림파일로 출력(정적) - 그림이 한번나오면 편집불가
#plotly는 결과를 html파일로 출력 (동적)
#data : 시각화 자료 - 데이터프레임(벡터는 불가 오직 데이터프레임만)
#geom : 시각화 종류(도구) // geom_point()점, geom_line()선, geom_bar()막대
#aes : 시각화 특성 // 위치x,y /크기size /색상col,fill /농도alpha
#레이어 추가 : '+' 연산자를 사용하여 레이어를 추가하는 형식으로 그래프를 추가.수정함
library(ggplot2)
library(dplyr) #두개는 항상 기본옵션으로
### Dataframe
idx<-1:100
val<-rnorm(100) #정규분포에서 생성된 임의의 난수
df<-data.frame(idx,val)
df %>% head(10)
### ggplot
ggplot(df,aes(x=idx,y=val)) + geom_point()
ggplot(df) + geom_point(aes(x=idx,y=val))
ggplot(df) + geom_point(aes(x=idx,y=val),color="darkblue",size=3,alpha=0.5)
ggplot(df) + geom_point(aes(x=idx,y=val),color="darkblue",size=3,alpha=0.5) +
geom_line(aes(x=idx,y=val),col="tomato3",size=3,alpha=0.5)
dev.off()
x11()
plot(cars)
dev.off()
x11()
dev.off()
plot(cars)
options(device.ask.default = FALSE)
plot(cars)
x <- c(1, 2, 3, 4, 5)
y <- c(2, 4, 1, 5, 7)
print(plot(x, y))
library(installr)
install.packages(installr)
install.packages("installr")
library(installr)
library(installr)
check.for.updates.R()
install.R()
version
check.for.updates.R()
#0308
library(tidyverse)
#ggplot2는 결과를 그림파일로 출력(정적) - 그림이 한번나오면 편집불가
#plotly는 결과를 html파일로 출력 (동적)
#data : 시각화 자료 - 데이터프레임(벡터는 불가 오직 데이터프레임만)
#geom : 시각화 종류(도구) // geom_point()점, geom_line()선, geom_bar()막대
#aes : 시각화 특성 // 위치x,y /크기size /색상col,fill /농도alpha
#레이어 추가 : '+' 연산자를 사용하여 레이어를 추가하는 형식으로 그래프를 추가.수정함
library(ggplot2)
library(dplyr) #두개는 항상 기본옵션으로
### Dataframe
idx<-1:100
val<-rnorm(100) #정규분포에서 생성된 임의의 난수
df<-data.frame(idx,val)
df %>% head(10)
### ggplot
ggplot(df,aes(x=idx,y=val)) + geom_point()
#0308
library(tidyverse)
#ggplot2는 결과를 그림파일로 출력(정적) - 그림이 한번나오면 편집불가
#plotly는 결과를 html파일로 출력 (동적)
#data : 시각화 자료 - 데이터프레임(벡터는 불가 오직 데이터프레임만)
#geom : 시각화 종류(도구) // geom_point()점, geom_line()선, geom_bar()막대
#aes : 시각화 특성 // 위치x,y /크기size /색상col,fill /농도alpha
#레이어 추가 : '+' 연산자를 사용하여 레이어를 추가하는 형식으로 그래프를 추가.수정함
library(ggplot2)
library(dplyr) #두개는 항상 기본옵션으로
### Dataframe
idx<-1:100
val<-rnorm(100) #정규분포에서 생성된 임의의 난수
df<-data.frame(idx,val)
df %>% head(10)
### ggplot
ggplot(df,aes(x=idx,y=val)) + geom_point()
ggplot(df) + geom_point(aes(x=idx,y=val))
ggplot(df) + geom_point(aes(x=idx,y=val),color="darkblue",size=3,alpha=0.5)
#ggplot(df,aes(x=idx,y=val)) + geom_point(color="darkblue",size=3,alpha=0.5)
ggplot(df) + geom_point(aes(x=idx,y=val),color="darkblue",size=3,alpha=0.5) +
geom_line(aes(x=idx,y=val),col="tomato3",size=3,alpha=0.5)
#ggplot(df,aes(x=idx,y=val)) + geom_point(color="darkblue",size=3,alpha=0.5) +
#geom_line(col="tomato3",size=3,alpha=0.5)
ggplot(df) + geom_point(aes(x=idx,y=val),color="darkblue",size=3,alpha=0.5) +
geom_line(aes(x=idx,y=val),col="tomato3",size=3,alpha=0.5) +
ggtitle("title") + xlab("xlab name") + ylab("ylab name")
ggplot(df) + geom_point(aes(x=idx,y=val),color="darkblue",size=3,alpha=0.5) +
geom_line(aes(x=idx,y=val),col="tomato3",size=3,alpha=0.5) +
labs(title="title",x='xlab name',y='ylab name') +
theme_bw()
ggplot(df,aes(x=idx,y=val)) + geom_point(color="darkblue",size=3,alpha=0.5) +
geom_line(col="tomato3",size=3,alpha=0.5) +
labs(title="title",x='xlab name',y='ylab name') +
theme_bw() #aes를 ggplot 안에 넣으면 코드가 훨씬 줄어들음 보통 이 방법 사용
#0310
######## introduction
### Figure 1.1
library(ggplot2)
library(dplyr)
df<-data.frame(
type = c("A","B","C"),
value = c(3,5,4)
)
ggplot(df,aes(x=type,y=value)) +
geom_bar(stat="identity") #값 자체를 그래프로 그리도록
ggplot(df,aes(x=type,y=value)) +
geom_bar(stat="identity",fill="skyblue") #fill은 사각형 채우는것,col은 선을 칠하는거
ggplot(df,aes(x=type,y=value)) +
geom_bar(stat="identity",fill="#56B4E9",width=0.65,alpha=0.9) #width 너비, alpha 농도
ggplot(df,aes(x=type,y=value)) +
geom_bar(stat="identity",fill="#56B4E9",width=0.65,alpha=0.9)+xlab("")
ggplot(df,aes(x=type,y=value)) +
geom_bar(stat="identity",fill="#56B4E9",width=0.65,alpha=0.9)+xlab("")+
theme_light() #background 조절
#정량 정성 연속 이상 범주.. 다시 구분 필요 자료의 형태 adsp 초반에 나오는 내용
getwd()
##### 2.1 데이터의 미학과 유형
### 그림 2.1
?shape
# A look at all 26 symbols
df2<-data.frame(x=1:5,y=1:25,z=1:25)
df2[26,]<-0
### shape
p<-ggplot(df2,aes(x,y))
p + geom_point(aes(shape=z),
size=5,colour="Red",
fill="Blue")+
scale_shape_identity()+
theme_void() #아무것도 출력하지 않는(x,y축)
#테두리 빨강 속은 파랑
### size
p + geom_point(aes(size=z),
shape=21,colour="Red",
fill="Blue")+
scale_shape_identity()+
theme_void()
### color
colors() #R에서 사용할수있는 색상이 나옴
fn_colors_plot <- function(color_start=1, col=5, line=20){
# Empty chart
plot(0, 0, type = "n", xlim = c(0, 1), ylim = c(0, 1), axes = FALSE, xlab = "", ylab = "")
# Add color background
rect(
rep((0:(col - 1)/col),line) ,
sort(rep((0:(line - 1)/line),col),decreasing=T),
rep((1:col/col),line) ,
sort(rep((1:line/line),col),decreasing=T),
border = "white" ,
col=colors()[seq(1,line*col)+color_start-1])
# Color names
text(
rep((0:(col - 1)/col),line)+0.1 ,
sort(rep((0:(line - 1)/line),col),decreasing=T)+0.015 ,
colors()[seq(1,line*col)+color_start-1]  ,
cex=1)
}
fn_colors_plot(100) #n번쨰부터 색깔을 보여줌
### line type: 0=blank,1=solid,2=dashed,3=dotted,4=dotdash,
#5=longdash,6=twodash
p<-ggplot(data.frame())
p+geom_hline(linetype=1,yintercept = 5,size=3)+
geom_hline(linetype=2,yintercept = 10,size=3)+
geom_hline(linetype=3,yintercept = 15,size=3)+
geom_hline(linetype=4,yintercept = 20,size=3)+
geom_hline(linetype=5,yintercept = 25,size=3)+
geom_hline(linetype=6,yintercept = 30,size=3)+
theme_void()
df<-data.frame(y=0:6,z=0:6)
ggplot(df)+
geom_hline(aes(linetype=z,yintercept = z),size=3)+
scale_linetype_identity()+
ylab("linetype")+
theme_bw()
##### 2.2 Scales map data values onto aesthetics
### Figure 2.3
load(file.choose())
