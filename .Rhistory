library(ggplot2)
ggplot(mtcars,aes(x=disp,y=mpg,fill=hp,shape=factor(cyl),size=wt)) +
geom_point() +
scale_fill_continuous(
type="viridis", name="power (hp)",
breaks=c(100,200,300)
) +
scale_shape_manual(values=c(23,24,21),name='cylinders') +
xlab("displacement(cu.in.)") +
ylab("fuel efficiency(mpg)") +
theme_light() +
theme(panel.border = element_blank()) + #테두리 없애기
guides(
shape = guide_legend(override.aes = list(size = 4, fill = "#329D84")),
size = guide_legend(override.aes = list(shape = 21, fill = "#329D84"),
title = "weight (1000 lbs)")
) #범례의 제목 바꾸는 것 잘 기억
### 정규분포
curve(dnorm(x),-4,4,ylim=c(-4,4)) #y축의 scale에 따라서 전혀 다른 그림이 될수도있음
##### 3.Coordinate systems and axes(좌표계 및 축)
### Figure 3.2
#install.packages("cowplot") #ggplot를 합쳐주는 녀석
load(choose.files())
data_SanDiego<-temps_long %>% filter(location=="San Diego")
#join - sandiego + houston
col_name<-c("date","temperature")
data_use<-data_SanDiego[col_name] %>% inner_join(data_Houston[col_name],by=c("date"),
suffix=c("_SanDiego","_Houston"))
data_use$label <- ifelse(substr(data_use$date,9,10)=='01',format(data_use$date,"%m%d"),NA)
data_use %>% head()
### label(text) 위치 보정
df_nudge <- data.frame(
x = ifelse(data_use$temperature_Houston > 1.63*data_use$temperature_SanDiego-34,-2,2),
y = ifelse(data_use$temperature_Houston > 1.63*data_use$temperature_SanDiego-34,2,-2)
)
### 화씨
tempsplot_F <- ggplot(data_use,aes(x=temperature_SanDiego,y=temperature_Houston)) +
geom_path(size=1,color="#0072B2") +
geom_text_repel(aes(label=label),
min.segment.length = 0,
nudge_x = df_nudge$x,
nudge_y = df_nudge$y) +
coord_fixed(xlim=c(45,85),ylim=c(48,88),expand=FALSE) +
xlab("temperature in San Diego(°F)") +
ylab("temperature in Houston(°F)") +
theme_light() + theme(panel.border = element_blank())
### 화씨 썹씨 변환 함수
F2C<-function(t) {(t-32)*5/9}
### 섭씨
tempsplot_C<-ggplot(data_use,aes(x=F2C(temperature_SanDiego),y=F2C(temperature_Houston))) +
geom_path(size=1,color="#0072B2") +
geom_text_repel(aes(label=label),
min.segment.length = 0,
nudge_x = (5/9)*df_nudge$x,
nudge_y = (5/9)*df_nudge$y) +
coord_fixed(xlim=F2C(c(45,85)),ylim=F2C(c(48,88)),expand=FALSE) +
xlab("temperature in San Diego(°C)") +
ylab("temperature in Houston(°C)") +
theme_light() + theme(panel.border = element_blank())
### multiple plots
plot_grid(tempsplot_F,tempsplot_C)
### y=x 직선 추가 & x,y축 동일 구간
### 화씨
tempsplot_F <- ggplot(data_use,aes(x=temperature_SanDiego,y=temperature_Houston)) +
geom_path(size=1,color="#0072B2") +
geom_abline(color='red',linetype=2) +
geom_text_repel(aes(label=label),
min.segment.length = 0,
nudge_x = df_nudge$x,
nudge_y = df_nudge$y) +
coord_fixed(xlim=c(45,85),ylim=c(48,88),expand=FALSE) +
xlab("temperature in San Diego(°F)") +
ylab("temperature in Houston(°F)") +
theme_light() + theme(panel.border = element_blank())
### 화씨 썹씨 변환 함수
F2C<-function(t) {(t-32)*5/9}
### 섭씨
tempsplot_C<-ggplot(data_use,aes(x=F2C(temperature_SanDiego),y=F2C(temperature_Houston))) +
geom_path(size=1,color="#0072B2") +
geom_abline(color='red',linetype=2) +
geom_text_repel(aes(label=label),
min.segment.length = 0,
nudge_x = (5/9)*df_nudge$x,
nudge_y = (5/9)*df_nudge$y) +
coord_fixed(xlim=F2C(c(45,85)),ylim=F2C(c(48,88)),expand=FALSE) +
xlab("temperature in San Diego(°C)") +
ylab("temperature in Houston(°C)") +
theme_light() + theme(panel.border = element_blank())
### multiple plots
plot_grid(tempsplot_F,tempsplot_C)
# 0324 - 데이터시각화
#### 3.2 비선형 축(Nonlinear axes)
### Figure 3.4
library(dplyr)
library(ggplot2)
df<-data.frame(x=c(1,3.16,10,31.6,100))
xaxis_lin<-ggplot(df,aes(x,y=1)) +
geom_point(size=3,color="#0072B2") +
scale_y_continuous(limits=c(0.8,1.2),expand=c(0,0),breaks=1)+
theme_light()+
theme(panel.border = element_blank(),
axis.ticks.length=grid::unit(0,"pt"),
axis.text.y=element_blank(),
axis.title.y=element_blank(),
axis.ticks.y=element_blank(),
plot.title=element_text(face="plain"),
plot.margin=margin(3,14,3,1.5))
xaxis_log<-ggplot(df,aes(log10(x),y=1)) +
geom_point(size=3,color="#0072B2") +
scale_y_continuous(limits=c(0.8,1.2),expand=c(0,0),breaks=1) +
theme_light() +
theme(panel.border = element_blank(),
axis.ticks.length=grid::unit(0,"pt"),
axis.text.y=element_blank(),
axis.title.y=element_blank(),
axis.ticks.y=element_blank(),
plot.title=element_text(face="plain"),
plot.margin=margin(3,14,3,1.5))
p1<-xaxis_lin +
scale_x_continuous(limits=c(0,100)) +
ggtitle("original data,linear scale")
p2<-xaxis_log +
scale_x_continuous(limits=c(0,2)) +
xlab(expression(paste("log"["10"],"(x)"))) +
ggtitle("log-transformed data, linear scale")
p3<-xaxis_lin +
scale_x_log10(limits=c(1,100),
breaks=c(1,3.16,10,31.6,100),
labels=c("1","3.16","10","31.6","100")) +
ggtitle("original data,logarithmic scale")
p4<-xaxis_log +
scale_x_log10(limits=c(1,100),
breaks=c(1,3.16,10,31.6,100),
labels=c("1","3.16","10","31.6","100")) +
xlab(expression(paste("log"["10"],"(x)"))) +
ggtitle("original data,logarithmic scale")
library(cowplot)
plot_grid(p1,p2,p3,ncol=1)
### Figure 3.5
### load: Us_census.rda
library(dplyr)
library(ggplot2)
library(ggrepel)
#load(choose.files())
head(US_census)
label_log10
ggplot(tx_counties,aes(x=index,y=popratio)) +
geom_hline(yintercept=1,linetype=2,color="grey40") + #가로 수평선 추가
geom_point(size=0.5,color="#0072B2") +
ggrepel::geom_text_repel(aes(label=label),point.padding=0.4,color="black",
min.segment.length=0) +
scale_y_log10(breaks=c(0.01,0.1,1,10,100),
name="population number / median",
labels=10^(-2:2)) +
scale_x_continuous(limits=c(0.5,nrow(tx_counties)+0.5),expand=c(0,0),
breaks=NULL, #c(1,50*(1:5)),
name="Texas counties, from most to least plpulous") +
theme_light() + theme(panel.border=element_blank()) +
theme(axis.line=element_blank(),
plot.margin=margin(3,7,3,1.5))
### Figure 3.7
df<-data.frame(x=c(0,1,4,9,16,25,36,49))
df<-data.frame(x=(1:7)^2)
xaxis_lin<-ggplot(df,aes(x,y=1)) + #y값은 1로 고정
geom_point(size=3,color="#0072B2") +
scale_y_continuous(limits=c(0.8,1.2),expand=c(0,0),breaks=1)+
theme_light() + theme(panel.border = element_blank()) +
theme(axis.ticks.length=grid::unit(0,"pt"),
axis.text.y=element_blank(),
axis.title.y=element_blank(),
axis.ticks.y=element_blank(),
plot.title=element_text(face="plain"),
plot.margin=margin(3,14,3,1.5))
xaxis_sqrt<-ggplot(df,aes(sqrt(x),y=1)) +
geom_point(size=3,color="#0072B2") +
scale_y_continuous(limits=c(0.8,1.2),expand=c(0,0),breaks=1)+
theme_light() + theme(panel.border = element_blank()) +
theme(axis.ticks.length=grid::unit(0,"pt"),
axis.text.y=element_blank(),
axis.title.y=element_blank(),
axis.ticks.y=element_blank(),
plot.title=element_text(face="plain"),
plot.margin=margin(3,14,3,1.5))
p1<-xaxis_lin +
scale_x_continuous(limits=c(0,50)) +
ggtitle("original data,linear scale")
p2<-xaxis_sqrt +
scale_x_continuous(limits=c(0,7.07)) +
xlab(expression(sqrt(x))) +
ggtitle("square-root-transformed data, linear scale")
p3<-xaxis_sqrt +
scale_x_continuous(limits=c(0,7.07),
breaks=c(0,1,sqrt(5),sqrt(10*(1:5))),
labels=c(0,1,5,10*(1:5)),name='x') +
expand_limits(expand=c(0,1)) +
ggtitle("original data,square-root scale")
plot_grid(p1,p2,p3,ncol=1)
### Figure 3.8
# source : Google, 01/07/2018
northeast_areas<-read.csv(text="state_abr,area
NY,54556
PA,46055
ME,35385
MA,10565
VT,9616
NH,9349
NJ,8723
CT,5543
RI,1212")
northeast_areas$state_abr<-factor(northeast_areas$state_abr,levels=
northeast_areas$state_abr) #factor로 바꾸어주는
areas_base<-ggplot(northeast_areas,aes(x=state_abr,y=area)) +
geom_col(fill="#56B4E9") + #막대그래프
ylab("area (square miles)") +
xlab("state") +
theme_light() + theme(panel.border=element_blank()) +
theme(plot.margin=margin(3,1.5,3,1.5))
p1<-areas_base +
scale_y_sqrt(limits=c(0,55000),
breaks=c(0,1000,5000,10000*(1:5)),
expand=c(0,0))
p2<-areas_base + #root scale을 해준것
scale_y_continuous(limits=c(0,55000),
breaks=10000*(0:6),
expand=c(0,0))
plot_grid(
p2,NULL,p1,
labels=c("a","","b"),nrow=1,rel_widths=c(1,0.04,1)
)
#로그스케일과 루트 스케일과의 큰차이는 0을 표현할숭있냐 없냐
#### Coordinate systems with curved axes
### Figure 3.9
df_points<-data.frame(x=c(1,3.5,0),
y=c(3,4,0),
label=c("(1,3)","(3.5,4)","(0,0)"),
vjust_polar=c(1.6,1,1.6),
hjust_polar=c(0.5,-0.1,0.5),
vjust_cart=c(1.6,1.6,-0.6),
hjust_cart=c(0.5,1.1,-0.1))
df_segments<-data.frame(x0=c(0,1,2,3,0,0,0,0),
x1=c(0,1,2,3,4,4,4,4),
y0=c(0,0,0,0,1,2,3,4),
y1=c(4,4,4,4,1,2,3,4))
p_cart<-ggplot(df_points,aes(x,y)) +
geom_point(size=2,color="#0072B2") +
geom_text(aes(label=label,
vjust=vjust_cart,
hjust=hjust_cart),
size=12/.pt) +
scale_x_continuous(limits=c(-0.5,4.5),expand=c(0,0)) +
scale_y_continuous(limits=c(-0.5,4.5),expand=c(0,0)) +
coord_fixed() +
xlab("x axis") +
ylab("y axis") +
theme_light() + theme(panel.border=element_blank()) +
theme(axis.ticks=element_blank(),
axis.ticks.length=grid::unit(0,"pt"),
plot.margin=margin(3,1.5,3,1.5))
p_polar<-ggplot(df_points,aes(x,y)) +
geom_segment(
data=df_segments,
aes(x=x0,xend=x1,y=y0,yend=y1),
color="gray",
inherit.aes=FALSE
) +
geom_point(size=2,color="#0072B2") +
geom_text(
aes(label=label,vjust=vjust_polar,hjust=hjust_polar),
size=12/.pt) +
scale_x_continuous(limits=c(0,4)) +
scale_y_continuous(limits=c(0,4)) +
coord_polar() +
xlab("x values(circular axis)") +
ylab("y values(radial axis)") +
theme_light() + theme(panel.border=element_blank()) +
background_grid(major="none") +
theme(axis.line = element_blank(),
axis.ticks = element_line(color="black"),
plot.margin = margin(3,1.5,3,1.5))
cowplot::plot_grid(
p_cart,NULL,p_polar,
labels=c("a","","b"),nrow=1,rel_widths = c(1,0.04,1)
)
### Figure 3.10
ggplot(temps_long,aes(x=date,y=temperature,color=location)) +
geom_line(size=1) +
scale_x_date(name="date",expand=c(0,0)) +
scale_y_continuous(limits=c(0,105),expand=c(0,0),
breaks=seq(-30,90,by=30),
name="temperature(`F)") +
coord_polar(theta="x",start=pi,direction=-1) +
theme_light() + theme(panel.border=element_blank())
region_colors<-c("#E69f00","#56B4E9","#009E73","#F0E442") # 4개 지방의 색 지정
region_colors_dark<-darken(region_colors,0.4) #색상을 발게 또는 어둡게 생성(음수는 어둡게)
state_colors<-region_colors_dark[as.numeric(popgrowth_df$region[order(popgrowth_df$state)])]
library(ggplot2)
ggplot(popgrowth_df,aes(x=state,y=100*popgrowth,fill=region)) +
geom_col() +
scale_y_continuous(
limits = c(-0.6,37.5), expand=c(0,0), #expand=c(0,0)은 확장을 시키지 않겠다
labels=scales::percent_format(accuracy=1,scale=1),
name="population growth, 2000 to 2010"
) +
scale_fill_manual(values=region_colors) +
coord_flip() +
theme_light() + theme(panel.border=element_blank(),panel.grid.major.y=element_blank()) +
theme(axis.title.y=element_blank(),
axis.line.y=element_blank(),
axis.ticks.length=unit(0,"pt"),
axis.text.y=element_text(size=10,color=state_colors),
legend.position=c(0.58,0.68), #범례의 위치
#legend.text=element_text(color=region_colors),
legend.background=element_rect(fill="#ffffffb0")) # '#ffffff'=white,'bo'=투명도
knitr::opts_chunk$set(echo = TRUE,
collapse = TRUE,
comment = "#>")
library(knitr)
library(sf)          # classes and functions for vector data
#> Linking to GEOS 3.8.0, GDAL 3.0.4, PROJ 6.3.1; sf_use_s2() is TRUE
library(terra)      # classes and functions for raster data
library(spData)        # load geographic data
library(spDataLarge)   # load larger geographic data
library(sp)
library(rgdal)
library(raster)
library(dplyr)
library(stringr) # for working with strings (pattern matching)
library(tidyr) # for unite() and separate()
library(data.table)
library(mapview)
library(tmap)
library(rmapshaper)
library(grid)
library(mapdeck)
library(leaflet) # for interactive maps
library(ggplot2) # tidyverse data visualization package
library(mapdeck)
library(shiny)
library(ggmap)
library(stplanr)
library(hexbin)
library(viridis)
register_google(key = 'pk.eyJ1IjoiaHMwODEzIiwiYSI6ImNsMXlocG1zNjBjcWwzY21xdmcxOW5xMWMifQ.j084vQn3wJbJ_PEGmcNOjA')
# install.packages("ggmap")
library(ggmap)
register_google(key = 'AIzaSyB4jjrVVAzb9fl8FQrQqUONAsaRBppWuSA')
# 우리나라 지도 호출
getmap <- get_googlemap("seoul")
ggmap(getmap)
# 우리나라 지도 호출
getmap <- get_googlemap("seoul")
# unzip(zipfile="C:/202201/GIS/data/부산광역시_교통정보서비스센터 보유 ITS CCTV 현황(SHP)_20210601.zip")
busan <- read_sf(dsn = "./Spatial_Information_Analysis/tl_tracffic_cctv_info.shp", options = "ENCODING:CP949")
# unzip(zipfile="C:/202201/GIS/data/부산광역시_교통정보서비스센터 보유 ITS CCTV 현황(SHP)_20210601.zip")
busan <- read_sf(dsn = "./Spatial_Information_Analysis/tl_tracffic_cctv_info.shp", options = "ENCODING:CP949")
getmap <- get_googlemap("seoul")
busan
# unzip(zipfile="C:/202201/GIS/data/부산광역시_교통정보서비스센터 보유 ITS CCTV 현황(SHP)_20210601.zip")
busan <- read_sf(dsn = "./Spatial_Information_Analysis/tl_tracffic_cctv_info.shp", options = "ENCODING:CP949")
# unzip(zipfile="C:/202201/GIS/data/부산광역시_교통정보서비스센터 보유 ITS CCTV 현황(SHP)_20210601.zip")
#busan <- read_sf(dsn = "./Spatial_Information_Analysis/tl_tracffic_cctv_info.shp", options = "ENCODING:CP949")
busan <- read_sf(dsn = "./Spatial_Information_Analysis/tl_tracffic_cctv_info.shp", options = "ENCODING:UTF-8")
# unzip(zipfile="C:/202201/GIS/data/부산광역시_교통정보서비스센터 보유 ITS CCTV 현황(SHP)_20210601.zip")
#busan <- read_sf(dsn = "./Spatial_Information_Analysis/tl_tracffic_cctv_info.shp", options = "ENCODING:CP949")
busan <- read_sf(dsn = "./Spatial_Information_Analysis/tl_tracffic_cctv_info.shp", options = "ENCODING:UTF-8")
# unzip(zipfile = "C:/202201/GIS/data/CTPRVN_20220324.zip")
sido <- read_sf(dsn = "./Spatial_Information_Analysis/ctp_rvn.shp", options = "ENCODING:CP949")
sido
plot(sido)
library(rnaturalearth)
usa <- ne_countries(country = "United States of America") # United States borders
class(usa)
usa_sf <- st_as_sf(usa)
plot(usa_sf[1])
korea <- ne_countries(country = "South Korea") # United States borders
class(korea)
korea_sf <- st_as_sf(korea)
plot(korea_sf[1])
f <- system.file("shapes/world.gpkg", package = "spData")
world = read_sf(f, quiet = TRUE)
tanzania = read_sf(f, query = 'SELECT * FROM world WHERE name_long = "Tanzania"')
tanzania_buf = st_buffer(tanzania, 50000)
tanzania_buf_geom = st_geometry(tanzania_buf)
tanzania_buf_wkt = st_as_text(tanzania_buf_geom)
tanzania_neigh = read_sf(f, wkt_filter = tanzania_buf_wkt)
f <- system.file("shapes/world.gpkg", package = "spData")
world = read_sf(f, quiet = TRUE)
tanzania = read_sf(f, query = 'SELECT * FROM world WHERE name_long = "Tanzania"')
tanzania_buf = st_buffer(tanzania, 50000)
tanzania_buf_geom = st_geometry(tanzania_buf)
tanzania_buf_wkt = st_as_text(tanzania_buf_geom)
tanzania_neigh = read_sf(f, wkt_filter = tanzania_buf_wkt)
### 8.4 Data Input(I)
- **gpkg** 형식 불러오기
## Chapter 9 : Making maps with R
# Add fill layer to nz shape
tm_shape(nz) +
tm_fill()
# Add border layer to nz shape
tm_shape(nz) +
tm_borders()
# Add fill and border layers to nz shape
tm_shape(nz) +
tm_fill() +
tm_borders()
# Add fill layer to nz shape
tm_shape(nz) +
tm_fill()
# Add border layer to nz shape
tm_shape(nz) +
tm_borders()
# Add fill and border layers to nz shape
tm_shape(nz) +
tm_fill() +
tm_borders()
```{r tmap shape result, echo = FALSE, message = FALSE, out.width = "100%"}
knitr::include_graphics("https://r.geocompx.org/09-mapping_files/figure-html/tmshape-1.png")
map_nz <- tm_shape(nz) + tm_polygons()
class(map_nz)
map_nz
map_nz1 <- map_nz +
tm_shape(nz_elev) + tm_raster(alpha = 0.7)
nz_water <- st_union(nz) %>% st_buffer(22200) %>%
st_cast(to = "LINESTRING")
map_nz2 <- map_nz1 +
tm_shape(nz_water) + tm_lines()
map_nz3 <- map_nz2 +
tm_shape(nz_height) + tm_dots()
tmap_arrange(map_nz1, map_nz2, map_nz3)
map_nz <- tm_shape(nz) + tm_polygons()
class(map_nz)
map_nz
map_nz1 <- map_nz +
tm_shape(nz_elev) + tm_raster(alpha = 0.7)
library(sf)
library(raster)
library(spData)
library(spDataLarge)
vignette(package = "sf") # see which vignettes are available
vignette("sf1") # an introduction to the package
plot(world)
world_mini = world[1:2, 1:3]
world_mini
world_asia = world[world$continent == "Asia", ]
asia = st_union(world_asia) #아시아 국가 합치기
#아시아만 빨간색으로 표시
plot(world["pop"], reset = FALSE) #reset = FLASE이면 지도 요소를 더 추가할 수 있는 모드로 플롯을 유지
plot(asia, add = TRUE, col = "red")
```
```{r}
plot(world["continent"], reset = FALSE)
cex = sqrt(world$pop) / 10000 #pop변수에 제곱근을 취하고 1000으로 나누어서 지도 시각화를 위해 크기를 맞춤
world_cents = st_centroid(world, of_largest = TRUE) #다각형(국가별) 중앙점 계산
plot(st_geometry(world_cents), add = TRUE, cex = cex) #인구크기에 따라 대륙별 중앙점에 원그려넣기
india = world[world$name_long == "India", ]
plot(st_geometry(india), expandBB = c(0, 0.2, 0.1, 1), col = "gray", lwd = 3)
plot(world_asia[0], add = TRUE)
urb_anim <- tm_shape(world) + tm_polygons() +
tm_shape(urban_agglomerations) + tm_dots(size = "population_millions") +
tm_facets(along = "year", free.coords = FALSE)
tmap_animation(urb_anim, filename = "./Spatial_Information_Analysis/urb_anim.gif", delay = 25)
# Add fill layer to nz shape
tm_shape(nz) +
tm_fill()
# Add border layer to nz shape
tm_shape(nz) +
tm_borders()
# Add fill and border layers to nz shape
tm_shape(nz) +
tm_fill() +
tm_borders()
knitr::include_graphics("https://r.geocompx.org/09-mapping_files/figure-html/tmshape-1.png")
map_nz <- tm_shape(nz) + tm_polygons()
class(map_nz)
map_nz
map_nz1 <- map_nz +tm_shape(nz_elev) + tm_raster(alpha = 0.7)
nz_water <- st_union(nz) %>% st_buffer(22200) %>%
st_cast(to = "LINESTRING")
map_nz2 <- map_nz1 +
tm_shape(nz_water) + tm_lines()
system.file("raster/nz_elev.tif", package = "spDataLarge")
map_nz1 <- map_nz + tm_shape(nz_elev) + tm_raster(alpha = 0.7)
map_nz1 <- map_nz + tm_shape(nz_elev.tif) + tm_raster(alpha = 0.7)
nz_elev
nz_elev = rast(system.file("raster/nz_elev.tif", package = "spDataLarge"))
map_nz1 <- map_nz + tm_shape(nz_elev) + tm_raster(alpha = 0.7)
install.packages("gifski")
## 1. 대전 지역 2016 ~ 2020년 데이터 추출
daejeon <- filter(raw.data,  발생지시도 == "대전" &  발생년 > 2015)
Sys.setlocale("LC_ALL","Korean")
getwd()
raw.data <- read.csv("./Spatial_Information_Analysis/12_20_death.csv", header = TRUE, fileEncoding = "EUC-KR")
## 구조 확인
str(raw.data)
## 테이블 확인
View(raw.data)
## 1. 대전 지역 2016 ~ 2020년 데이터 추출
daejeon <- filter(raw.data,  발생지시도 == "대전" &  발생년 > 2015)
getwd()
raw.data <- read.csv("/Spatial_Information_Analysis/12_20_death.csv", header = TRUE, fileEncoding = "EUC-KR")
raw.data <- read.csv("./Spatial_Information_Analysis/12_20_death.csv", header = TRUE, fileEncoding = "EUC-KR")
## 구조 확인
str(raw.data)
raw.data <- read.csv("./Spatial_Information_Analysis/12_20_death.csv", header = TRUE, fileEncoding = "EUC-KR")
## 구조 확인
str(raw.data)
desire_lines$distance = as.numeric(st_length(desire_lines))
route_carshort = route(l = desire_carshort, route_fun = route_osrm, osrm.profile = "car")  # foot, bike, car
desire_lines$distance = as.numeric(st_length(desire_lines))
plot(st_geometry(desire_carshort))
plot(desire_carshort$geom_car, col = "red", add = TRUE)
plot(st_geometry(st_centroid(zones_od)), add = TRUE)
